#!/usr/bin/env node
"use strict";

var api = require("./../lib/api"),
	cmd = require("./../lib/cmd"),
	cnf = require("./../lib/readConfig"),
	colors = require("colors");

colors.setTheme({
	input: "grey",
	verbose: "cyan",
	prompt: "grey",
	info: "green",
	data: "grey",
	help: "cyan",
	warn: "yellow",
	debug: "blue",
	error: "red"
});

var config = {
	folder: {},
	option: {
		"default": {
			"folder": "",
			"minFolder": ""
		},
		"min": {
			"get": false,
			"rename": false,
			"ignoreExt": []
		},
		"removeAfter": false,
		"verbose": false
	},
	source: {},
	bowerFileFolder: ""
};

if (require.main === module) {
	var cli = require("cli"),
		pkg = require("../package.json");

	// Version display
	cli.setApp(pkg.name, pkg.version);
	cli.enable("version");

	// CLI options
	cli.parse({
		automatic: ["a", "Automatically select the right option to execute from bower."],
		install: ["i", "Run bower install command"],
		update: ["u", "Run bower update command"],
		bower: [false, "Input the bower.json file path.", "path", "." ],
		min: ["m", "Try to get .min file version first."],
		renameMin: ["M", "Try to get .min file version first and keep the name specified in the bower.json file."],
		verbose: ["V", "Get more information from the tool."],
		removeAfter: ["r", "Remove the bower_components folder after execution."]
	});

	cli.main(function (args, options) {
		config.bowerFileFolder = options.bower;

		cnf.read(config).then(
			function() {
				if (options.verbose) {
					config.option.verbose = true;
				}

				if (options.removeAfter) {
					config.option.removeAfter = true;
				}

				// Add load of minimised file version and renaming of them if needed
				if (options.renameMin) {
					config.option.min.get = true;
					config.option.min.rename = true;
				} else if (options.min) {
					config.option.min.get = true;
					config.option.min.rename = false;
				} else {
					config.option.min.get = false;
					config.option.min.rename = false;
				}

				// Actions
				if (options.automatic) {
					cmd.automatic(config).then(
						function (message) {
							console.log(message);
							process.exit(0);
						}, function (err) {
							console.log(err.red);
							process.exit(1);
						}
					);
				} else if (options.install) {
					cmd.install(config).then(
						function (message) {
							console.log(message);
							process.exit(0);
						}, function (err) {
							console.log(err.red);
							process.exit(1);
						}
					);
				} else if (options.update) {
					cmd.update(config).then(
						function (message) {
							console.log(message);
							process.exit(0);
						}, function (err) {
							console.log(err.red);
							process.exit(1);
						}
					);
				} else {
					cmd.run(config).then(
						function (message) {
							console.log(message);
							process.exit(0);
						}, function (err) {
							console.log(err.red);
							process.exit(1);
						}
					);
				}
			}, function(err) {
				console.error(err);
			}
		);
	});
} else {
	api.config = config;
	module.exports = {
		automatic: api.automatic(),
		install: api.install(),
		update: api.install(),
		run: api.run()
	};
}